ifdef CONFIG_VR9_GPHY_FW_EMBEDDED
    GPHY_FIRMWARE = $(TOPDIR)/board/$(BOARD)/gphy_firmware.img
else
    GPHY_FIRMWARE = $(TOPDIR)/dummy
endif

ENV_BLOCK=

ifdef CONFIG_BUILD_ENV_BLOCK
ENV_BLOCK=ubootenv.img 
endif

ALL += bootstrap.bin u-boot.lzimg u-boot.ltq $(ENV_BLOCK)
ifdef CONFIG_LTQ_SECURE_BOOT
ALL +=stage3.bin stage2.bin
endif

ifdef CONFIG_BOOT_FROM_UART
ALL += u-boot.asc
endif

LDSCRIPT_BOOTSTRAP := $(TOPDIR)/board/$(BOARD)/bootstrap.lds
ifdef CONFIG_BOOT_FROM_NOR
OBJS_BOOTSTRAP  = $(TOPDIR)/$(CPUDIR)/$(BOARD)/start_bootstrap.o
OBJS_BOOTSTRAP  += $(TOPDIR)/board/$(BOARD)/lowlevel_init.o
else 
OBJS_BOOTSTRAP  = $(TOPDIR)/$(CPUDIR)/$(BOARD)/start_uncomp.o
endif



OBJS_BOOTSTRAP  += $(TOPDIR)/lib/string.o
OBJS_BOOTSTRAP  += $(CPUDIR)/$(BOARD)/lib$(CPU).a
LIBS_BOOTSTRAP  = $(TOPDIR)/lib_bootstrap/libbootstrap.a
LIBS_BOOTSTRAP += $(TOPDIR)/lib/crc32.o
LIBS_BOOTSTRAP += $(TOPDIR)/drivers/serial/lq_asc.o
LIBS_BOOTSTRAP += $(TOPDIR)/$(CPUDIR)/$(BOARD)/clock.o
#LIBS_BOOTSTRAP += $(TOPDIR)/$(CPUDIR)/$(BOARD)/asc.o
LIBS_BOOTSTRAP += $(TOPDIR)/arch/mips/lib/time.o


BOOTSTRAP_LDFLAGS = -Bstatic -T $(LDSCRIPT_BOOTSTRAP) -Ttext $(CONFIG_BOOTSTRAP_TEXT_BASE) 

ifdef CONFIG_BOOT_FROM_NOR
$(obj)u-boot.ltq: $(obj)System.map $(obj)bootstrap.bin $(obj)u-boot.lzimg
		@echo -=== BUILD NOR image ===-
		@touch dummy
		@cat $(obj)bootstrap.bin > $(obj)u-boot.ltq
		@cat $(obj)u-boot.lzimg >> $(obj)u-boot.ltq
		@scripts_platform/pad2align.sh -n 65536 u-boot.ltq 
		@cat $(GPHY_FIRMWARE) >>u-boot.ltq
endif

ifdef CONFIG_BOOT_FROM_NAND
$(obj)u-boot.ltq: $(obj)System.map $(obj)bootstrap.bin $(obj)u-boot.lzimg
		@echo -=== BUILD NAND image ===-
		@touch dummy
		@$(TOPDIR)/scripts_platform/pad2align.sh -n 10240 bootstrap.bin
		@cat $(obj)bootstrap.bin > $(obj)u-boot.ltq
		@cat $(obj)u-boot.lzimg >> $(obj)u-boot.ltq
		@$(TOPDIR)/scripts_platform/pad2align.sh -n 131072 u-boot.ltq
		@cat $(GPHY_FIRMWARE) >>u-boot.ltq
endif

ifdef CONFIG_BOOT_FROM_SPI
ifdef CONFIG_LTQ_SECURE_BOOT
$(obj)u-boot.ltq: $(obj)System.map $(obj)bootstrap.bin $(obj)u-boot.lzimg sfddr.bin ds_crypt.bin stools
		@echo -=== BUILD SPI image ===-
		@./stools -i sfddr.bin -o sfddr.enc -d ds_crypt.bin -a 0xbe220000
		@scripts_platform/mk_sf.pl board/vr9/xrx200_ddr2_197_CAS4_config.conf sfddr.enc 0xa0600000 u-boot.ltq
		@scripts_platform/pad2align.sh -n 24576 u-boot.ltq
		@cat u-boot.lzimg >>u-boot.ltq
		@scripts_platform/pad2align.sh -n 196608 u-boot.ltq
		@cat $(GPHY_FIRMWARE) >>u-boot.ltq
else
$(obj)u-boot.ltq: $(obj)System.map $(obj)bootstrap.bin $(obj)u-boot.lzimg sfddr.bin 
		@touch dummy
		@scripts_platform/mk_sf.pl dummy sfddr.bin 0xbe220000 u-boot.ltq
		@scripts_platform/pad2align.sh -n 24576 u-boot.ltq
		@cat u-boot.lzimg >> u-boot.ltq
		@scripts_platform/pad2align.sh -n 196608 u-boot.ltq
		@cat $(GPHY_FIRMWARE) >>u-boot.ltq
endif
endif
						
RAMCONF=xrx200_ddr2_197_CAS4_config.conf
u-boot.asc: u-boot.srec
	@echo -=== BUILD ASCII image ===-
	ln -s -f board/$(BOARDDIR)/$(RAMCONF) ram.conf
	cp $(GPHY_FIRMWARE) phy_firmware_alligned
	scripts_platform/pad2align.sh -n 128 phy_firmware_alligned
	hexdump -v -e '/1 "%02X"' phy_firmware_alligned > phy_firmware.hex
	scripts_platform/gct ram.conf u-boot.srec phy_firmware.hex \
	    $(CONFIG_VR9_GPHY_FW_ADDR) u-boot.asc

LDFLAGS_SFDDR = -Bstatic -T $(TOPDIR)/board/$(BOARD)/bootstrap.lds -Ttext 0xbe220000 $(PLATFORM_LDFLAGS)
OBJS_SFDDR = $(TOPDIR)/board/$(BOARD)/start_sfddr.o 
OBJS_SFDDR +=$(TOPDIR)/board/$(BOARD)/sfddr_board.o 
OBJS_SFDDR +=$(TOPDIR)/board/$(BOARD)/tune_ddr.o 
OBJS_SFDDR +=$(TOPDIR)/board/$(BOARD)/lowlevel_init.o
LIBS_SFDDR = $(TOPDIR)/lib/string.o
LIBS_SFDDR += $(TOPDIR)/lib/crc32.o
LIBS_SFDDR += $(TOPDIR)/$(CPUDIR)/$(BOARD)/clock.o
LIBS_SFDDR += $(TOPDIR)/drivers/serial/lq_asc.o
LIBS_SFDDR += $(TOPDIR)/arch/mips/lib/time.o
LIBS_SFDDR += $(TOPDIR)/lib_bootstrap/LzmaDecode.o
LIBS_SFDDR += $(TOPDIR)/lib_bootstrap/LzmaWrapper.o


sfddr.bin:    $(obj)sfddr
		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@

sfddr:  depend $(SUBDIRS) $(OBJS_SFDDR) $(LIBS_SFDDR) bootstrap
		$(LD) $(LDFLAGS_SFDDR) $(OBJS_SFDDR) $(LIBS_SFDDR) \
	     -Map sfddr.map -o sfddr

$(OBJS_SFDDR):
		rm -f $(OBJS_SFDDR)
		$(MAKE) -C `dirname $@` sfddr
				

u-boot.lzimg: $(obj)u-boot.bin System.map
		./tools/lzma e $(obj)u-boot.bin $(obj)u-boot.lzma
		scripts_platform/pad2align.sh -n 16 u-boot.lzma
		$(TOPDIR)/tools/mkimage -A mips -T firmware -C lzma \
		-a 0x$(shell grep "T _start" $(TOPDIR)/System.map | awk '{ printf "%s", $$1 }') \
		-e 0x$(shell grep "T _start" $(TOPDIR)/System.map | awk '{ printf "%s", $$1 }') \
		-n 'u-boot image' -d $(obj)u-boot.lzma $@

bootstrap.bin:    $(obj)bootstrap
		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@

bootstrap: $(OBJS_BOOTSTRAP) $(LIBS_BOOTSTRAP)  $(LDSCRIPT_BOOTSTRAP)
		$(LD) $(BOOTSTRAP_LDFLAGS) $$UNDEF_SYM $(OBJS_BOOTSTRAP) $(LIBS_BOOTSTRAP) \
		       -Map bootstrap.map -o bootstrap

ds_crypt.bin: ds_crypt
		$(OBJCOPY) --gap-fill=0xff -O binary $< $@

ds_crypt: rsa_crypt.o		
		$(LD) -G 0 -static -T $(TOPDIR)/board/$(BOARD)/rsalinker.lds --start-group rsa_crypt.o --end-group -o ds_crypt

rsa_crypt.o: $(TOPDIR)/board/$(BOARD)/rsa_crypt.c
		$(CC) -g -ggdb -G0 -fno-common -fno-strict-aliasing -fno-builtin -pipe -eb -Wall -c -o $@ $<	

stools: $(TOPDIR)/board/$(BOARD)/stools.c
		$(HOSTCC) -o $@ $<	


$(LIBS_BOOTSTRAP):
		$(MAKE) -C `dirname $@` all


$(ENV_BLOCK): $(obj)u-boot $(obj)u-boot.bin
		$(NM) -Ss u-boot >u-boot.sym
		scripts_platform/mk_envimg.sh $@

stage3.bin: $(CONFIG_DSA_PRIVKEY) u-boot.ltq
		@scripts_platform/pad2align.sh -n 32 u-boot.ltq
ifdef CONFIG_ENCRYPT_STAGE3
		@scripts_platform/build_stage3.sh -i u-boot.ltq -o stage3.bin \
		                                  -d $(CONFIG_BOOTSTRAP_TEXT_BASE)\
		                                  -j $(CONFIG_BOOTSTRAP_TEXT_BASE)\
		                                  -p $(CONFIG_DSA_PRIVKEY)     \
                                          -k $(CONFIG_STAGE3_AES_KEY)
else
		@scripts_platform/build_stage3.sh -i u-boot.ltq -o stage3.bin \
                                          -d $(CONFIG_BOOTSTRAP_TEXT_BASE)\
		                                  -j $(CONFIG_BOOTSTRAP_TEXT_BASE)\
		                                  -p $(CONFIG_DSA_PRIVKEY)
endif

$(CONFIG_DSA_PRIVKEY):
ifdef CONFIG_DSA_KEY_AUTO
		@openssl dsaparam -out dsaparam.pem 1024
		@openssl gendsa -out $(CONFIG_DSA_PRIVKEY) dsaparam.pem
		@openssl dsa -in $(CONFIG_DSA_PRIVKEY) -out $(CONFIG_DSA_PUBKEY) -pubout
endif
		@echo "private key:"$(CONFIG_DSA_PRIVKEY)
		@echo "public key: "$(CONFIG_DSA_PUBKEY)


stage2.bin: $(CONFIG_DSA_PRIVKEY)
		@ln -sf $(TOPDIR)/.config $(TOPDIR)/stage2/.config
		@ln -sf $(TOPDIR)/include/configs/autoconf.h $(TOPDIR)/stage2/include/autoconf.h
		@scripts_platform/key2header.sh $(CONFIG_DSA_PRIVKEY) stage2/bn_val.h
		@scripts_platform/hex2array.pl aes_key $(CONFIG_STAGE3_AES_KEY) >>stage2/bn_val.h
		@$(TOPDIR)/scripts_platform/hex2array.pl aes_key $(CONFIG_STAGE2_AES_KEY)\
		                                          >$(TOPDIR)/nand_spl/board/lantiq/aes_key.h
		@$(TOPDIR)/scripts_platform/hex2array.pl iv $(CONFIG_STAGE2_AES_IV)\
		                                          >>$(TOPDIR)/nand_spl/board/lantiq/aes_key.h
		@$(MAKE) -C $(TOPDIR)/stage2 all
		@cp $(TOPDIR)/stage2/stage2.bin stage2.bin
		@$(TOPDIR)/scripts_platform/pad2align.sh -n $(CONFIG_STAGE2_SIZE) stage2.bin
		@openssl enc -aes-256-cbc -in stage2.bin \
		             -out stage2.enc -K $(CONFIG_STAGE2_AES_KEY) \
					 -iv $(CONFIG_STAGE2_AES_IV) -nopad
					
